#!/usr/bin/env python
#
# Check if a compatible version of a python module is installed
#
# usage: check_python_module <module> <min_version>
#

import sys, os.path, importlib, argparse

parser = argparse.ArgumentParser(description="Check presence and version of a Python module")
parser.add_argument("module", help="python module to check")
parser.add_argument("min_version", help="minimum version")
parser.add_argument("-v", "--verbose", action="store_true")
args = parser.parse_args()

modname=args.module
version=args.min_version

#
# See if numpy is installed in the first place
#
try:
	module = importlib.import_module(modname)
except ImportError:
	print >>sys.stderr, "error: %(module)s is not installed. please install %(module)s v%(needver)s or later and try again." % {
		'module' : modname,
		'needver' : version
	}
	exit(-1)

#
# Check version compatibility
#
needver = map(int, version.split('.'))
havever = map(int, module.__version__.split('.')) + [ 0 ] * len(needver)
for a, b in zip(needver, havever):
	if a > b:
		print >>sys.stderr, "error: %(module)s version too old (v%(havever)s). please install %(module)s v%(needver)s or later and try again." % {
			'module' : modname,
			'havever' : module.__version__,
			'needver' : version
		}
		exit(-1)
	elif a < b:
		break

if args.verbose:
	print "Using externally provided %s v%s." % (modname, module.__version__)
	# print "Located in '%s'." % os.path.dirname(module.__file__)

# OK.
exit(0)
